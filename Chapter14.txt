--No9. PL/SQL 動的SQL

Chapter14.PL/SQL 動的SQL

　＜動的SQLを実行する方法＞
　１．EXECUTE IMMEDIATE文を利用
　２．CURSOR変数を利用してOPEN,FETCH,CLOSE文でSELECTを実行する。（SELECT文のみ実行可能）
　３．ORACLE内部PackageであるDBMS_SQLを利用する。
　　
　14-1.EXECUTE IMMEDIATE
　　
　　●使用フォーマット
　　　-----------------------------------------------------------
　　　EXECUTE IMMEDIATE ＜SQL文字列＞ [IN 変数] [USING Bind変数]
　　　-----------------------------------------------------------
　　
　　14-1-1.SQL結果を変数に保存
　　　
　　　動的SQLはINTOを追加して結果を変数として保存することができる。
　　　----------------------------------------------------------
　　　DECLARE
　　　  v_query CONSTANT VARCHAR2(200) := 'SELECT empno, ename FROM emp WHERE empno=7788';
　　　  
　　　  TYPE emp_type IS RECORD(
　　　    empno emp.empno%TYPE,
　　　    ename emp.ename%TYPE
　　　  );
　　　  
　　　  v_rec   emp_type;        -- Record Variable
　　　  v_empno emp.empno%TYPE;  -- Scalar Variable
　　　  v_ename emp.ename%TYPE;  -- Scalar Variable
　　　  
　　　  TYPE emp_arr IS TABLE OF emp_type;
　　　  v_emps emp_arr;          -- Record Collection Variable
　　　
　　　BEGIN
　　　  --INTO Scalar変数
　　　  EXECUTE IMMEDIATE v_query INTO v_empno, v_ename;
　　　  DBMS_OUTPUT.PUT_LINE(v_empno||', '||v_ename);
　　　  
　　　  --INTO Record変数
　　　  EXECUTE IMMEDIATE v_query INTO v_rec;
　　　  DBMS_OUTPUT.PUT_LINE(v_rec.empno||', '||v_rec.ename);
　　　  
　　　  --INTO Record Collection変数
　　　  EXECUTE IMMEDIATE 'SELECT empno, ename FROM emp' BULK COLLECT INTO v_emps;
　　　  DBMS_OUTPUT.PUT_LINE('A Number Of Employee: '||v_emps.COUNT);
　　　END;
　　　----------------------------------------------------------
　　　※No14_1.sqlを参照
　　　
　　14-1-2.BIND変数を使用
　　　SQL文字列にBIND変数に対するPlaceHolderを含めてUSINGにBINDされる変数及び値を設定する。
　　　----------------------------------------------------------
　　　DECLARE
　　　  v_query CONSTANT VARCHAR2(200) := 'SELECT COUNT(*) FROM emp WHERE deptno = :deptno AND job = :job';
　　　  v_deptno emp.deptno%TYPE;
　　　  v_cnt PLS_INTEGER;
　　　  
　　　BEGIN
　　　  v_deptno := 20;
　　　  EXECUTE IMMEDIATE v_query INTO v_cnt USING IN v_deptno, 'CLERK';
　　　  DBMS_OUTPUT.PUT_LINE('COUNT = '||v_cnt);
　　　END;
　　　----------------------------------------------------------
　　　※No14_2.sqlを参照
　　
　14-2.CURSOR変数を使用する方法
　　　
　　　CURSOR変数についてOPEN,FETCH,CLOSE文を使用する動的SQLはSELECT文のみで使用できる。
　　　----------------------------------------------------------
　　　DECLARE
　　　  TYPE empcur_type IS REF CURSOR;
　　　  v_emp_cur   empcur_type; --CURSOR変数
　　　  emp_rec     emp%ROWTYPE;
　　　  v_stmt      VARCHAR2(200);
　　　  v_empno     NUMBER;
　　　BEGIN
　　　  v_stmt := 'SELECT * FROM emp WHERE empno = :empno';
　　　  v_empno := 7788;
　　　  
　　　  OPEN v_emp_cur FOR v_stmt USING v_empno;
　　　  
　　　  LOOP
　　　    FETCH v_emp_cur INTO emp_rec;
　　　    EXIT WHEN v_emp_cur%NOTFOUND;
　　　  END LOOP;
　　　  
　　　  CLOSE v_emp_cr;
　　　END;
　　　----------------------------------------------------------
　　　※No14_3.sqlを参照
　
　14-3.ORACLE内部PackageであるDBMS_SQLを利用
　
　　①DBMS_SQLを使用したSELECT処理
　　　----------------------------------------------------------
　　　DECLARE
　　　  v_cursor_id NUMBER;
　　　  v_sql_stmt  VARCHR2(4000) := Q'<SELECT * FROM emp WHERE deptno = :deptno AND hiredate >= TO_DATE(:hiredate, 'YYYY-MM-DD')>';
　　　  TYPE vc_array IS TABLE OF VARCHAR2(100);
　　　  v_bind_var  vc_array;
　　　  v_bind_val  vc_array;
　　　  v_ret       NUMBER;
　　　  
　　　  v_desc_tab  DBMS_SQL.DESC_TAB;
　　　  v_col_cnt   PLS_INTEGER;
　　　  v_str_var   VARCHAR2(100);
　　　  v_num_var   NUMNER;
　　　  v_date_var  DATE;
　　　  v_row_cnt   PLS_INTEGER;
　　　  
　　　BEGIN
　　　  v_bind_var := vc_array('deptno', 'hiredate');
　　　  v_bind_val := vc_array('10', '1987-07-01');
　　　  
　　　  --SQL CURSORをIPENしてCURSOR番号を返還貰う。
　　　  v_cursor_id := DBMS_SQL.OPEN_CURSOR;
　　　  
　　　  --SQLをParcingする。
　　　  DBMS_SQL.PARSE(v_cursor_id, v_sql_stmt, DBMS_SQL.NATIVE);
　　　  
　　　  --BIND変数に値をBINDする。
　　　  FOR i IN 1 .. v_bind_var.COUNT LOOP
　　　    DBMS_SQL.BIND_VARIABLE(v_cursor_id, v_bind_var(i), v_bind_val(i));
　　　  END LOOP;
　　　  
　　　  --SELECT文のColumn情報を持ってくる。
　　　  DBMS_SQL.DESCRIBE_COLUMNS(v_cursor_id, v_col_cnt, v_desc_tab);
　　　  
　　　  --SELECTされるColumnを定義する。
　　　  FOR i IN 1 .. v_col_cnt LOOP
　　　    IF v_desc_tab(i).col_type = DBMS_SQL.NUMBER_TYPE THEN
　　　      DBMS_SQL.DEFINE_COLUMN(v_cursor_id, i, v_num_var);
　　　    ELSIF v_desc_tab(i).col_type = DBMS_SQL.DATE_TYPE THEN
　　　      DBMS_SQL.DEFINE_COLUMN(v_cursor_id, i, v_date_var);
　　　    ELSE
　　　      DBMS_SQL.DEFINE_COLUMN(v_cursor_id, i, v_str_var, 100);
　　　    END IF;
　　　  END LOOP;
　　　  
　　　  --CURSORを実行する。
　　　  v_ret := DBMS_SQL.EXECUTE(v_cursor_id);
　　　  
　　　  --値を出力する。
　　　  v_row_cnt := 0;
　　　  WHILE DBMS_SQL.FETCH_ROWS(v_cursor_id) > 0
　　　  LOOP
　　　    v_row_cnt := v_row_cnt + 1;
　　　    DBMS_OUTPUT.PUT_LINE(v_row_cnt||'番目ROW');
　　　    FOR i IN 1 .. v_col_cnt LOOP
　　　      IF(v_desc_tab(i).col_type = DBMS_SQL.NUMBER_TYPE) THEN
　　　        DBMS_SQL.COLUMN_VALUE(v_cursor_id i, v_num_var);
　　　        DBMS_OUTPUT.PUT_LINE(CHR(9)||rpad(v_desc_tab(i).col_name, 8, ' ')||' : ' ||v_num_var);
　　　      ELSIF(v_desc_tab(i).col_type = DBMS_SQL.DATE_TYPE) THEN
　　　        DBMS_SQL.COLUMN_VALUE(v_cursor_id i, v_date_var);
　　　        DBMS_OUTPUT.PUT_LINE(CHR(9)||rpad(v_desc_tab(i).col_name, 8, ' ')||' : ' ||TO_CHAR(v_date_var,'YYYY-MM-DD'));
　　　      ELSE
　　　        DBMS_SQL.COLUMN_VALUE(v_cursor_id i, v_str_var);
　　　        DBMS_OUTPUT.PUT_LINE(CHR(9)||rpad(v_desc_tab(i).col_name, 8, ' ')||' : ' ||v_str_var);
　　　      END IF;
　　　    END LOOP;
　　　  END LOOP;
　　　  
　　　  --CURSORをクローズする。
　　　  DBMS_SQL.CLOSE_CURSOR(v_cursor_id);
　　　END;
　　　----------------------------------------------------------
　　　※No14_4.sqlを参照
　　　
　　②DBMS_SQLを使用したDML処理